import time
import random



def createlist(n):
    numbers = list(range(n))
    random.shuffle(numbers)
    return numbers

def test(n):
    testListe = createlist(n)
    startm = time.time()
    mergeSort(testListe)    # Zu testende Methode
    endem = time.time()
    
    startb = time.time()
    bubble_sort(testListe)
    endeb = time.time()
    
    starti = time.time()
    insertionsort(testListe)
    endei = time.time()
    
    return f"merge: {endem - startm} in s\nbubble: {endeb - startb} in s\ninsertion: {endei - starti} in s"

def mergeSort(liste):
    sortierteListe = []     # Ausgabeliste für diesen Durchlauf leer setzen
    if len(liste) == 1:     # direkter Return wenn kompletten rekursionsabstieg geschaft
        return liste
    liste1 = liste[:int(len(liste) / 2)]    # Liste teilen
    liste2 = liste[int(len(liste) / 2):]
    liste1 = mergeSort(liste1)      # geteilten Teil der Liste in rekursion sortieren
    liste2 = mergeSort(liste2)
    while liste1 and liste2:      # wenn in beiden Listen noch etwas dann normaler vergleich
        if liste1[0] <= liste2[0]:
            sortierteListe.append(liste1[0])
            liste1.pop(0)       # einsortiertes Element löschen
        else:
            sortierteListe.append(liste2[0])
            liste2.pop(0)
    if liste1:        # wenn nurnoch eine Liste dann andere nach und nach einfügen
        sortierteListe += liste1
    else:
        sortierteListe += liste2
    return sortierteListe       # die sortierte Liste in den rekursiven Aufstieg

def bubble_sort(list_given):
    n = len(list_given)
    for i in range(n):
        for j in range(n-1):
            if list_given[j] > list_given[j+1]:
                list_given[j], list_given[j+1] = list_given[j+1], list_given[j]
    return list_given

def insertionsort(liste):
    n = len(liste)
    sortiert = n-1
    for so_oft in range(0,sortiert):
        temp = liste[0]
        for i in range(1,sortiert):
            liste[i-1] = liste[i]

        for j in range(sortiert,n):
            if temp <= liste[j]:
                liste[j-1] = temp
                break
            else:
                liste[j-1] = liste[j]
                liste[j] = temp
        sortiert-=1
    return liste

def writetotxt(messung):
    pass


#print(mergeSort([3, 4, 1, 7, 3, 8]))
#print(mergeSort([460, 6, 213, 685, 275, 967, 618, 856, 57, 819, 280, 786, 218, 411, 185, 576, 671, 968, 104, 260, 615, 119, 590, 195, 779, 309, 303, 257, 827, 843, 732, 914, 85, 726, 864, 403, 207, 517, 330, 481, 138, 459, 292, 603, 208, 308, 624, 874, 154, 873, 640, 221, 333, 977, 701, 816, 439, 42, 118, 648, 860, 549, 112, 354, 672, 241, 329, 451, 745, 916, 311, 744, 431, 423, 375, 979, 589, 210, 548, 859, 34, 607, 995, 754, 605, 387, 250, 944, 211, 370, 171, 795, 562, 735, 875, 676, 243, 780, 485, 144, 307, 586, 934, 805, 756, 264, 369, 833, 938, 173, 39, 824, 555, 455, 840, 774, 773, 669, 765, 511, 788, 77, 121, 179, 931, 955, 367, 106, 848, 724, 602, 137, 900, 223, 994, 4, 335, 413, 906, 537, 867, 134, 772, 95, 657, 656, 245, 46, 23, 599, 808, 38, 996, 355, 736, 552, 426, 667, 111, 100, 56, 720, 291, 631, 84, 998, 504, 248, 117, 347, 863, 970, 361, 706, 438, 785, 318, 784, 86, 91, 204, 246, 130, 495, 12, 937, 360, 857, 954, 851, 102, 529, 422, 434, 799, 636, 343, 151, 983, 414, 641, 806, 876, 668, 176, 237, 427, 404, 139, 247, 253, 285, 122, 738, 997, 401, 289, 568, 324, 326, 415, 734, 638, 140, 93, 164, 382, 898, 675, 570, 146, 123, 169, 233, 727, 762, 69, 266, 829, 98, 810, 421, 617, 739, 217, 595, 899, 775, 628, 948, 553, 124, 941, 484, 697, 486, 435, 793, 561, 487, 910, 742, 258, 234, 768, 305, 445, 395, 228, 416, 141, 677, 410, 41, 741, 600, 544, 512, 849, 936, 850, 236, 433, 831, 388, 357, 499, 457, 101, 990, 787, 539, 406, 778, 178, 790, 999, 743, 832, 923, 971, 551, 298, 441, 503, 299, 215, 687, 167, 8, 649, 442, 362, 155, 508, 189, 975, 604, 408, 188, 286, 574, 536, 842, 540, 872, 530, 313, 76, 962, 161, 466, 314, 152, 7, 789, 985, 828, 73, 612, 338, 62, 51, 219, 105, 803, 791, 651, 904, 321, 942, 609, 148, 72, 492, 9, 437, 15, 713, 80, 196, 903, 927, 582, 804, 390, 168, 920, 594, 356, 501, 172, 723, 436, 623, 516, 131, 708, 763, 801, 853, 480, 475, 133, 418, 633, 393, 261, 746, 964, 68, 224, 145, 16, 892, 929, 36, 523, 639, 440, 479, 341, 728, 447, 47, 251, 992, 184, 461, 429, 277, 510, 467, 115, 94, 378, 777, 203, 870, 310, 989, 888, 136, 679, 575, 182, 957, 110, 32, 653, 58, 959, 74, 322, 707, 981, 302, 268, 194, 127, 156, 524, 458, 680, 794, 613, 571, 70, 295, 627, 901, 90, 809, 391, 165, 558, 339, 891, 18, 31, 227, 721, 232, 170, 254, 87, 1, 374, 909, 748, 972, 886, 444, 986, 698, 353, 89, 960, 854, 506, 389, 157, 776, 527, 25, 97, 400, 531, 206, 550, 284, 226, 518, 546, 37, 220, 969, 363, 300, 792, 681, 802, 953, 522, 826, 29, 276, 579, 890, 547, 163, 980, 316, 797, 409, 129, 917, 294, 616, 877, 346, 538, 323, 372, 13, 868, 505, 766, 175, 306, 158, 973, 535, 643, 267, 902, 449, 448, 402, 755, 489, 514, 818, 191, 688, 658, 340, 700, 577, 692, 379, 525, 545, 114, 894, 764, 893, 239, 528, 420, 704, 61, 297, 554, 83, 566, 714, 331, 752, 44, 855, 490, 560, 465, 349, 497, 907, 542, 446, 282, 897, 71, 160, 866, 222, 811, 202, 946, 177, 974, 813, 351, 468, 822, 14, 350, 231, 689, 924, 181, 925, 405, 443, 166, 296, 397, 696, 896, 471, 225, 933, 905, 180, 820, 769, 911, 50, 452, 869, 35, 662, 601, 5, 976, 470, 532, 209, 912, 682, 55, 81, 796, 652, 394, 3, 125, 259, 838, 597, 663, 580, 596, 256, 278, 821, 858, 327, 839, 634, 109, 865, 543, 325, 783, 265, 921, 606, 837, 197, 478, 368, 635, 82, 364, 103, 48, 120, 328, 705, 509, 757, 380, 75, 190, 142, 515, 150, 205, 192, 334, 844, 386, 715, 312, 725, 782, 252, 753, 572, 845, 262, 712, 915, 149, 287, 336, 608, 270, 557, 932, 585, 930, 279, 216, 984, 0, 399, 19, 407, 113, 593, 835, 462, 494, 556, 871, 332, 798, 274, 588, 255, 987, 317, 922, 301, 342, 474, 637, 493, 881, 841, 513, 678, 430, 519, 526, 702, 63, 281, 950, 722, 358, 940, 660, 884, 878, 846, 108, 507, 428, 666, 162, 67, 249, 396, 642, 352, 836, 132, 731, 703, 834, 565, 11, 883, 49, 212, 710, 450, 644, 381, 963, 943, 939, 926, 737, 366, 830, 229, 269, 563, 424, 64, 135, 598, 283, 383, 993, 59, 54, 52, 272, 717, 472, 626, 988, 584, 365, 453, 230, 377, 304, 611, 235, 159, 373, 674, 10, 463, 385, 43, 961, 78, 271, 770, 716, 825, 800, 620, 751, 949, 951, 760, 645, 27, 24, 199, 573, 20, 96, 885, 476, 293, 263, 53, 718, 498, 622, 655, 661, 198, 2, 918, 965, 491, 60, 815, 767, 733, 116, 945, 759, 17, 273, 496, 456, 695, 781, 659, 534, 183, 244, 107, 978, 664, 45, 982, 991, 240, 673, 200, 22, 126, 729, 320, 625, 919, 521, 417, 567, 319, 502, 376, 578, 454, 26, 614, 128, 952, 193, 473, 629, 28, 823, 880, 935, 432, 665, 79, 482, 398, 392, 288, 92, 345, 879, 619, 187, 761, 88, 583, 693, 632, 500, 520, 483, 348, 847, 758, 966, 533, 807, 242, 21, 425, 852, 630, 569, 464, 371, 30, 913, 699, 817, 143, 646, 581, 771, 412, 592, 610, 315, 359, 290, 238, 174, 591, 683, 477, 889, 812, 887, 740, 928, 65, 33, 153, 861, 709, 488, 337, 541, 99, 694, 947, 1000, 862, 344, 559, 201, 670, 66, 469, 419, 684, 186, 690, 691, 958, 214, 814, 895, 384, 719, 647, 882, 711, 750, 686, 730, 749, 654, 147, 40, 621, 908, 747, 564, 650, 587, 956]))
n = int(input("wie lang soll die Liste sein: "))
while n:
    print(test(n))
    n = int(input("wie lang soll die Liste sein: "))
